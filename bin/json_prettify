#!/usr/bin/env python
import json
import optparse
import os
import re
import sys

def Unquote(x):
  if isinstance(x, dict):
    return dict([(x,Unquote(y)) for x,y in x.iteritems()])
  elif isinstance(x, list):
    return [Unquote(y) for y in x]
  elif isinstance(x, basestring):
    if x.startswith('{') and x.endswith('}'):
      try:
        j = json.loads(x)
        return j
      except ValueError:
        return x
    else:
      return x
  elif isinstance(x, float):
    return x
  elif isinstance(x, int):
    return x

def repeatChar(c, n_times):
  return ''.join([c for i in range(n_times)])

def Main(args):
  parser = optparse.OptionParser('%prog <filename>')
  parser.add_option('--unquote',
                    action='store_true',
                    default=False,
                    help='Unquotes things that look like quoted json')
  parser.add_option('-i', '--in-place', dest='in_place',
                    action='store_true',
                    help='Prettifies the file in place')
  options, args = parser.parse_args(args)
  if len(args) != 1:
    parser.error('expected filename');

  if args[0] == '-':
    f = sys.stdin
  else:
    f = open(args[0], 'r')

  try:
    text = f.read()
  finally:
    if f != sys.stdin:
      f.close()

  try:
    j = json.loads(text)
  except ValueError, ex:
    msg = str(ex)
    m = re.search('char (\d+)', msg)
    if m:
      i = int(m.group(1))
      lo = max(0, i - 40)
      hi = lo + 80
      sys.stderr.write('JSON issue at character %i:\n' % i);
      if lo > 320:
        sys.stderr.write(text[lo-320:hi-320] + '\n');
      if lo > 240:
        sys.stderr.write(text[lo-240:hi-240] + '\n');
      if lo > 160:
        sys.stderr.write(text[lo-160:hi-160] + '\n');
      if lo > 80:
        sys.stderr.write(text[lo-80:hi-80] + '\n');
      sys.stderr.write(text[lo:hi] + '\n');
      sys.stderr.write(repeatChar(' ', i - lo - 1) + '^\n');
      m.group(1)
    else:
      raise
    return 1

  if options.unquote:
    j = Unquote(j)
  res = json.dumps(j, indent=2)
  res = res.replace(' \n', '\n');
  if options.in_place:
    with open(args[0], 'w') as f:
      f.write(res)
  else:
    sys.stdout.write(res)

if __name__ == '__main__':
  sys.exit(Main(sys.argv[1:]))
